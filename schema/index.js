const { gql } = require(`apollo-server-express`)
// const { gql } = require('apollo-server-express');
/* query { activities(args: {start_date:"2019-01-01", end_date:"2019-01-05" } )
  { id, org_id, user_id, owner_name, deal_id }}*/

const typeDefs = gql`
  scalar Date
  scalar DateTime
  scalar Json
  scalar SequelizeJSON

  # refactor to match conventions
  # entityGet (id: "" ...)
  # entityDelete (id: "")
  # entitiyUpdate (id: "" ... data: {})
  # entityCreate (data: {})
  type Query {
    _dummy: String
    me: User

    i360Login: i360LoginReturn
    i360GetVolunteerDetails: Json

    groupsGet (organizationId: String): [Group]
    usersGet(where: UserInput): [User]
    organizationsGet: [Organization]

    # TODO: make real return
    # rename uploadsGet to filesGet
    uploadsGet: [File]
    fileGet(id: String): File

    exploreGet (where: SequelizeJSON): [DTVoterFile]

    vaultFieldsGet: [String]
    vaultGet (
      query: Json # raw query generated by query builder tool 
      info: [String] # fields to be returned from top level mssql data
      importedInfo: [String] # fields to be returned from their imported data
    ): Json

  }

  type Mutation {
    login(username: String!, password: String!): LoginReturn

    email(email: String!, message: String!, subject: String): Json
    userCreate(data: CreateUserInput, orgId: String): User
    userUpdate(where: UserWhereUniqueInput!, data: UpdateUserInput!): User
    userDelete(where: UserWhereUniqueInput!): User
    setPassword(where: UserWhereUniqueInput!, data: UpdateUserInput!): User

    i360VolunteerCreate(data: UserInput): Json

    addOrganizationData(orgId: String!, data: Json!): Json
    csvImport(name: String!, data: String!): Json

    organizationCreate(name: String! email: String phone: String contactName: String): Json
    organizationUpdate(
      where: WhereUniqueInput!
      name: String
      email: String
      phone: String
      contactName: String
      ownedProperties: OwnedPropertiesInput
    ): Organization
    organizationDelete(_id: String!): String

    groupCreate(name: String! description: String organizationId: String): Group
    groupDelete(id: String!): String
    groupUpdate(where: WhereUniqueInput! data: GroupInput!): Group
    setSettings(data: Json) : Json

    fileDelete(id: String) : Json

    vaultFieldsAdd (wpaiNationalFlags: [String] dtVoterFile: [String]): Organization
                                                                        
    exportToVault (regIds: [String]): Json

    vaultInsert (
      state: String!
      CongressionalDistrict: Int
      LegislativeDistrict: Int
      SenateDistrict: Int
      RegistrationAddressZip5: Int
      Precinct: Int
      CountyFIPS: Int
    ): Json
  }

  # TYPES

  type DTVoterFile {
    FirstName: String
    MiddleName: String
    LastName: String
    Sex: String
    AgeRange: String
    CongressionalAgeRange: String
    MailingAddressCity: String
    State: String
    MailingAddressZip5: String
    Zipcode: Int
    CongressionalDistrict: Int
    LegislativeDistrict: Int
    SenateDistrict: Int
    DT_RegID: String
  }

  type Group {
    _id: String!
    name: String!
    description: String
    organizationId: String
  }

  type File {
    _id: String
    name: String
    fileName: String
    filePath: String
    orgId: String
    status: String
    rowCount: Int
    matchedRowCount: Int
    createdBy: String
    createdAt: String
    updatedAt: String
    encodedName: String
    fileHash: String
    base64Code: String
    properties: [String]
  }

  type i360LoginReturn {
    access_token: String!
    expires_in: Int
    token_type: String
  }

  type isAuthenticated {
    isAuthenticated: Boolean
  }

  type LoginReturn {
    user: User
    token: String
  }

  type Organization {
    _id: String!
    name: String!
    address: String
    address2: String
    city: String
    state: String
    zipcode: Int
    email: String
    phone: String
    contactName: String
    ownedProperties: OwnedProperties
    createdAt: DateTime
    updatedAt: DateTime
    createdBy: String
  }

  type OwnedProperties {
    wpaiNationalFlags: [String]
    dtVoterFile: [String]
  }

  type User {
    _id: String!
    userName: String
    orgId: String
    organization: Organization
    fullName: String
    email: String
    phone: String
    password: String
    isAdmin: Boolean
    status: String
    verified: Boolean
    inviteCode: String
    groups: [Group]
    settings: Json
  }

  #INPUTS
  input qInput {
    limit: Int
    offset: Int
    datatype: Int
    id: Int
  }

  input GroupInput {
    _id: String
    name: String
    description: String
  }

  input CreateUserInput {
    userName: String
    orgId: String
    fullName: String!
    email: String!
    phone: String!
    password: String!
    isAdmin: Boolean
    status: String
    verified: Boolean
    inviteCode: String
    groups: [GroupInput]
  }

  input UpdateUserInput {
    _id: String
    userName: String
    orgId: String
    fullName: String
    email: String
    phone: String
    password: String
    isAdmin: Boolean
    status: String
    groups: [GroupInput]
    organization: OrganizationInput
    verified: Boolean
    settings: Json
  }

  input UserInput {
    _id: String
    userName: String
    orgId: String
    fullName: String
    email: String
    phone: String
    password: String
    isAdmin: Boolean
    status: String
    verified: Boolean
    token: String
  }

  input WhereUniqueInput {
    _id: String
  }

  input UserWhereUniqueInput {
    _id: String
    userName: String
    inviteCode: String
  }

  input OrganizationInput {
    _id: String!
    name: String!
    address: String
    address2: String
    city: String
    state: String
    zipcode: Int
    email: String
    phone: String
    contactName: String
    createdAt: DateTime
    updatedAt: DateTime
    createdBy: String
    ownedProperties: OwnedPropertiesInput
  }

  input FileWhereUniqueInput {
    _id: String
    fileName: String
  }

  input OwnedPropertiesInput {
    wpaiNationalFlags: [String]
    dtVoterFile: [String]
  }

`

module.exports = typeDefs
